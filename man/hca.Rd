% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hca.R, R/hca2.R
\name{hca}
\alias{hca}
\alias{hca_cr}
\alias{hca_dst}
\alias{hca_hc}
\alias{hca_ord}
\alias{hca_clusters}
\title{Hierarchical clustering analysis}
\usage{
hca(m = NULL, cr = FALSE, dst = FALSE, hc = FALSE, ord = FALSE,
  clusters = FALSE, return.steps = FALSE, hc.method = "average",
  cor.method = "pearson", compute.dist = T,
  dist.method = "euclidean", ord.labels = T, h = NULL, k = NULL,
  min.cluster.size = 5, max.cluster.size = 0.8)

hca_cr(m, ...)

hca_dst(...)

hca_hc(...)

hca_ord(...)

hca_clusters(...)

hca(m = NULL, cr = FALSE, dst = FALSE, hc = FALSE, ord = FALSE,
  clusters = FALSE, return.steps = FALSE, hc.method = "average",
  cor.method = "pearson", compute.dist = T,
  dist.method = "euclidean", ord.labels = T, h = NULL, k = NULL,
  min.cluster.size = 5, max.cluster.size = 0.8)

hca_cr(m, ...)

hca_dst(...)

hca_hc(...)

hca_ord(...)

hca_clusters(...)
}
\arguments{
\item{m}{input matrix or NULL. If NULL, an object must be provided to one of 'cr', 'dst' or 'hc'. Default: NULL}

\item{cr, dst, hc, ord, clusters}{the relevant hca object (specifications below) or logical. If an object, hca() starts with this as input. Later inputs override earlier ones, except 'ord' and 'clusters' which are ignored. If TRUE, hca() stops after the object is generated. If FALSE, then the object is computed and the function proceeds, other arguments permitting. Default: FALSE}

\item{dst}{distance matrix of class 'dist' or logical. Default: FALSE}

\item{hc}{hierarchical clustering object of class 'hclust' or logical. Default: FALSE}

\item{ord}{logical. An order vector will be ignored. Default: FALSE}

\item{clusters}{logical. Default: FALSE}

\item{return.steps}{logical indicating whether to return intermediary steps when a subset of the arguments are computed.. Default: FALSE}

\item{hc.method}{linkage method. Default: 'average'}

\item{cor.method}{correlation coefficient. Default: 'pearson'}

\item{compute.dist}{logical. If FALSE, 'cr' is coerced to a distance matrix. If TRUE, distances are calculated from 'cr'. Default: T}

\item{dist.method}{string specifying distance metric; ignored if compute.dist = F. Default: 'euclidean'}

\item{ord.labels}{if FALSE, will return ordered indices rather than character vector. Default: T}

\item{...}{see arguments in hca for details.}

\item{cr}{correlation or similarity matrix or logical. Default: FALSE}

\item{m}{input matrix or NULL. If NULL, an object must be provided to one of 'cr', 'dst' or 'hc'. Default: NULL}

\item{cr, dst, hc, ord, clusters}{the relevant hca object (specifications below) or logical. If an object, hca() starts with this as input. Later inputs override earlier ones, except 'ord' and 'clusters' which are ignored. If TRUE, hca() stops after the object is generated. If FALSE, then the object is computed and the function proceeds, other arguments permitting. Default: FALSE}

\item{cr}{correlation or similarity matrix or logical. Default: FALSE}

\item{dst}{distance matrix of class 'dist' or logical. Default: FALSE}

\item{hc}{hierarchical clustering object of class 'hclust' or logical. Default: FALSE}

\item{ord}{logical. An order vector will be ignored. Default: FALSE}

\item{clusters}{logical. Default: FALSE}

\item{return.steps}{logical indicating whether to return intermediary steps when a subset of the arguments are computed.. Default: FALSE}

\item{hc.method}{linkage method. Default: 'average'}

\item{cor.method}{correlation coefficient. Default: 'pearson'}

\item{compute.dist}{logical. If FALSE, 'cr' is coerced to a distance matrix. If TRUE, distances are calculated from 'cr'. Default: T}

\item{dist.method}{string specifying distance metric; ignored if compute.dist = F. Default: 'euclidean'}

\item{ord.labels}{if FALSE, will return ordered indices rather than character vector. Default: T}

\item{...}{see arguments in hca for details.}
}
\value{
object from hca call.

object or list of objects. If the latter, a full list contains m (input matrix to be clustered), cr (correlation matrix), dst (distance matrix), hc (hclust object), ord (char. vector), clusters (list of char. vectors).

object from hca call.

object or list of objects. If the latter, a full list contains m (input matrix to be clustered), cr (correlation matrix), dst (distance matrix), hc (hclust object), ord (char. vector), clusters (list of char. vectors).
}
\description{
hca takes an expression matrix as input and works through sequentially-dependent computations to produce a list with the following objects:
\enumerate{
\item 'm': your input (expression) matrix
\item 'cr': a correlation (or similarity) matrix
\item 'dst': a distance matrix
\item 'hc': a hierarchical clustering object
\itemize{
\item 'ord': the clustering order (only useful as output)
}
\item 'clusters': a list of cluster groups
}

hca takes an expression matrix as input and works through sequentially-dependent computations to produce a list with the following objects:
\enumerate{
\item 'm': your input (expression) matrix
\item 'cr': a correlation (or similarity) matrix
\item 'dst': a distance matrix
\item 'hc': a hierarchical clustering object
\itemize{
\item 'ord': the clustering order (only useful as output)
}
\item 'clusters': a list of cluster groups
}
}
\details{
It is up to you to provide the correct argument(s) to the functions:

hca_cr must take <m>

hca_dst must take <m> or <cr>

hca_hc can take <m>, <cr> or <dst>

hca_ord can take <m>, <cr>, <dst> or <hc>

hca_clusters can take any of the above.

By default, hca returns a list containing all above mentioned objects.

To break from the function after your object of interest has been computed, set the corresponding argument to TRUE. Note that when an argument is set to TRUE, only that argument is returned unless return.steps = T.

To begin the function from a precomputed object, pass to the appropriate argument. This allows you to skip precomputed steps and provide custom objects -- for example a similarity matrix (instead of the default correlation matrix computed in 'cr').

The hca_\link{*} wrapper functions act as a shorthand to retrieve specific objects (replace \link{*} with object name). hca_* wrappers have simpler syntax but always return \emph{one} object.

It is up to you to provide the correct argument(s) to the functions:

hca_cr must take <m>

hca_dst must take <m> or <cr>

hca_hc can take <m>, <cr> or <dst>

hca_ord can take <m>, <cr>, <dst> or <hc>

hca_clusters can take any of the above.

By default, hca returns a list containing all above mentioned objects.

To break from the function after your object of interest has been computed, set the corresponding argument to TRUE. Note that when an argument is set to TRUE, only that argument is returned unless return.steps = T.

To begin the function from a precomputed object, pass to the appropriate argument. This allows you to skip precomputed steps and provide custom objects -- for example a similarity matrix (instead of the default correlation matrix computed in 'cr').

The hca_\link{*} wrapper functions act as a shorthand to retrieve specific objects (replace \link{*} with object name). hca_* wrappers have simpler syntax but always return \emph{one} object.
}
\examples{
hca_clusters(hc = hc)
hca_ord(m = m)
hca_clusters(hc = hc)
hca_ord(m = m)
}
\seealso{
\code{\link[stats]{cor}},\code{\link[stats]{hclust}},\code{\link[stats]{dist}}

\code{\link[stats]{cor}},\code{\link[stats]{hclust}},\code{\link[stats]{dist}}
}
